// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RatingApp.Models;

#nullable disable

namespace RatingApp.Migrations
{
    [DbContext(typeof(ContextClass))]
    [Migration("20230911123219_mig1")]
    partial class mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RatingApp.Models.Admin", b =>
                {
                    b.Property<string>("emailId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("emailId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("RatingApp.Models.Author", b =>
                {
                    b.Property<string>("emailId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("emailId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("RatingApp.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuhorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthoremailId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthoremailId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("RatingApp.Models.Raing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("bookId")
                        .HasColumnType("int");

                    b.Property<float>("raing")
                        .HasColumnType("real");

                    b.Property<string>("readeremailId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("bookId");

                    b.HasIndex("readeremailId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("RatingApp.Models.Reader", b =>
                {
                    b.Property<string>("emailId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("emailId");

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("RatingApp.Models.Book", b =>
                {
                    b.HasOne("RatingApp.Models.Author", "Author")
                        .WithMany("books")
                        .HasForeignKey("AuthoremailId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("RatingApp.Models.Raing", b =>
                {
                    b.HasOne("RatingApp.Models.Book", "book")
                        .WithMany("Raings")
                        .HasForeignKey("bookId");

                    b.HasOne("RatingApp.Models.Reader", "reader")
                        .WithMany()
                        .HasForeignKey("readeremailId");

                    b.Navigation("book");

                    b.Navigation("reader");
                });

            modelBuilder.Entity("RatingApp.Models.Author", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("RatingApp.Models.Book", b =>
                {
                    b.Navigation("Raings");
                });
#pragma warning restore 612, 618
        }
    }
}
